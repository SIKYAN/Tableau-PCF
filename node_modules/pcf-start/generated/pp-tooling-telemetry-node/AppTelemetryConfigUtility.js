"use strict";
// Copyright (C) Microsoft Corporation. All rights reserved.
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserSettingsFromSharedInstall = exports.createGlobalTelemetryEnvironment = exports.registerCommonFinalTelemetryProcessors = exports.configureTelemetryClient = exports.setupAndStartAppInsights = void 0;
var TelemetryUserSettingsFileProvider_1 = require("./TelemetryUserSettingsFileProvider");
var AppTelemetryUtility_1 = require("./AppTelemetryUtility");
var TelemetryConstants = require("./TelemetryConstants");
var appInsights = require("applicationinsights");
var process = require("process");
var path = require('path');
var os = require('os');
var uuidv4 = require('uuid').v4;
function setupAndStartAppInsights(appInsightsResourceProvider, environment) {
    var appInsightsResource = appInsightsResourceProvider.GetAppInsightsResourceForDataBoundary(environment.dataBoundary);
    if (!appInsightsResource.connectionString)
        throw new Error("AppInsightsResource missing connectionString. (dataBoundary: '" + environment.dataBoundary + "')");
    appInsights.setup(appInsightsResource.connectionString)
        // suppress confusing DNS/http warnings if AI endpoints are not reachable
        .setInternalLogging(false, false)
        .setAutoCollectExceptions(false)
        .start();
}
exports.setupAndStartAppInsights = setupAndStartAppInsights;
function configureTelemetryClient(aiClient, productName, productVersion, sessionId, environment, userSettings) {
    var _a, _b;
    if (!productName)
        throw new Error("productName must be specified.");
    if (!productVersion)
        throw new Error("productVersion must be specified.");
    if (!AppTelemetryUtility_1.isSupportedAgentProductVersion(productVersion))
        throw new Error("productVersion '" + productVersion + "' is not a supported version format.");
    if (!sessionId)
        throw new Error("sessionId must be specified.");
    aiClient.config.disableAppInsights = (_a = environment.optOut) !== null && _a !== void 0 ? _a : !((_b = userSettings.telemetryEnabled) !== null && _b !== void 0 ? _b : true);
    // aka: ClientAppTelemetryInitializer.cs
    aiClient.context.tags[aiClient.context.keys.userId] = userSettings.uniqueId;
    aiClient.context.tags[aiClient.context.keys.cloudRole] = productName;
    aiClient.context.tags[aiClient.context.keys.cloudRoleInstance] = '#####';
    aiClient.context.tags[aiClient.context.keys.applicationVersion] = productVersion;
    aiClient.context.tags[aiClient.context.keys.sessionId] = sessionId;
}
exports.configureTelemetryClient = configureTelemetryClient;
function registerCommonFinalTelemetryProcessors(aiClient, environment, logger) {
    if (logger && !!environment.developerMode) {
        aiClient.addTelemetryProcessor(function (envelope, context) { return logTelemetryItem(logger, envelope, context); });
    }
}
exports.registerCommonFinalTelemetryProcessors = registerCommonFinalTelemetryProcessors;
function logTelemetryItem(logger, envelope, context) {
    if (!envelope.data || !logger)
        return true; // Ignore when data doesn't exist
    var telemetryType = appInsights.Contracts.baseTypeToTelemetryType(envelope.data.baseType);
    switch (telemetryType) {
        case appInsights.Contracts.TelemetryType.Request:
            {
                var data = envelope.data.baseData;
                logger.info("[pp-tooling-telemetry-node] Processing telemetry item of type '" + envelope.data.baseType + "'. name: " + data.name + ", responseCode: " + data.responseCode);
            }
            break;
        case appInsights.Contracts.TelemetryType.Event:
            {
                var data = envelope.data.baseData;
                logger.info("[pp-tooling-telemetry-node] Processing telemetry item of type '" + envelope.data.baseType + "'. name: " + data.name);
            }
            break;
        case appInsights.Contracts.TelemetryType.Exception:
            {
                var data = envelope.data.baseData;
                logger.info("[pp-tooling-telemetry-node] Processing telemetry item of type '" + envelope.data.baseType + "'. problemId: '" + data.problemId + "'");
            }
            break;
        default:
            logger.info("[pp-tooling-telemetry-node] Processing telemetry item of type '" + envelope.data.baseType + "'");
            break;
    }
    return true;
}
function createGlobalTelemetryEnvironment(getEnvironmentVariable) {
    if (getEnvironmentVariable === void 0) { getEnvironmentVariable = getEnvironmentVariableFromProcess; }
    return {
        optOut: AppTelemetryUtility_1.parseBooleanEnvironmentVariable(getEnvironmentVariable(TelemetryConstants.EnvironmentVariableNames.PpToolsTelemetryOptOut)),
        developerMode: AppTelemetryUtility_1.parseBooleanEnvironmentVariable(getEnvironmentVariable(TelemetryConstants.EnvironmentVariableNames.PpToolsTelemetryDeveloperMode)),
        dataBoundary: getEnvironmentVariable(TelemetryConstants.EnvironmentVariableNames.PpToolsTelemetryDataBoundary),
        automationAgent: getEnvironmentVariable(TelemetryConstants.EnvironmentVariableNames.PpToolsAutomationAgent),
    };
}
exports.createGlobalTelemetryEnvironment = createGlobalTelemetryEnvironment;
function getEnvironmentVariableFromProcess(name) {
    return process.env[name];
}
function getAppDataPath() {
    var platform = os.platform();
    switch (platform) {
        case 'darwin':
            return '~/Library/';
        case 'linux':
            return process.env.HOME + "/.config/";
        case 'win32':
            return process.env.LOCALAPPDATA;
        default:
            throw new Error("Platform \"" + platform + "\" is not currently supported");
    }
}
function getCurrentUserSettingsOrDefault(provider, logger) {
    try {
        return provider.GetCurrent();
    }
    catch (error) {
        logger === null || logger === void 0 ? void 0 : logger.error("[pp-tooling-telemetry-node]: ITelemetryUserSettingsProvider.GetCurrent threw unexpected error. Returning new user settings. Error: " + error);
        return {
            uniqueId: uuidv4(),
            telemetryEnabled: true,
        };
    }
}
function getUserSettingsFromSharedInstall(logger) {
    var userSettingsPath = path.join(getAppDataPath(), 'Microsoft', 'PowerAppsCli', 'usersettings.json');
    var userSettingsProvider = new TelemetryUserSettingsFileProvider_1.TelemetryUserSettingsFileProvider(userSettingsPath);
    return getCurrentUserSettingsOrDefault(userSettingsProvider, logger);
}
exports.getUserSettingsFromSharedInstall = getUserSettingsFromSharedInstall;
